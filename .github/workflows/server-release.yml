name: build a release
on: push
    # branches:
      # - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: rust-server/target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: run cargo build
        working-directory: rust-server
        run: cargo build --release --locked

      - name: run upx
        uses: svenstaro/upx-action@v1-release
        with:
          file: rust-server/target/release/mediaqbot-server

      - name: get short commit hash
        id: short_hash
        run: |
          echo "::set-output name=value::$(git rev-parse --short $GITHUB_SHA)"

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.short_hash.outputs.value }}
          release_name: Release ${{ steps.short_hash.outputs.value }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./rust-server/target/release/mediaqbot-server
          asset_name: mediaqbot-server-linux-amd64
          asset_content_type: application/octet-stream
